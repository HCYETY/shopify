{% doc %}
  @prompt
    Create a sticky navigation bar with clickable links that smoothly scroll to corresponding sections on the page. Include customizable menu items, styling options, and anchor link functionality.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-sticky-nav-{{ ai_gen_id }} {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background-color: {{ block.settings.background_color }};
    backdrop-filter: blur(10px);
    border-bottom: {{ block.settings.border_width }}px solid {{ block.settings.border_color }};
    transition: all 0.3s ease;
    padding: {{ block.settings.padding_vertical }}px 0;
  }

  .ai-sticky-nav-container-{{ ai_gen_id }} {
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
    padding: 0 20px;
    display: flex;
    justify-content: {{ block.settings.alignment }};
    align-items: center;
  }

  .ai-sticky-nav-menu-{{ ai_gen_id }} {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: {{ block.settings.item_spacing }}px;
  }

  .ai-sticky-nav-item-{{ ai_gen_id }} {
    margin: 0;
  }

  .ai-sticky-nav-link-{{ ai_gen_id }} {
    display: block;
    padding: {{ block.settings.link_padding_vertical }}px {{ block.settings.link_padding_horizontal }}px;
    color: {{ block.settings.text_color }};
    text-decoration: none;
    font-size: {{ block.settings.font_size }}px;
    font-weight: {{ block.settings.font_weight }};
    text-transform: {{ block.settings.text_transform }};
    border-radius: {{ block.settings.link_border_radius }}px;
    transition: all 0.3s ease;
    position: relative;
    cursor: pointer;
  }

  .ai-sticky-nav-link-{{ ai_gen_id }}:hover {
    color: {{ block.settings.text_hover_color }};
    background-color: {{ block.settings.link_hover_background }};
  }

  .ai-sticky-nav-link-{{ ai_gen_id }}.active {
    color: {{ block.settings.active_text_color }};
    background-color: {{ block.settings.active_background_color }};
  }

  .ai-sticky-nav-mobile-toggle-{{ ai_gen_id }} {
    display: none;
    background: none;
    border: none;
    color: {{ block.settings.text_color }};
    font-size: 24px;
    cursor: pointer;
    padding: 8px;
  }

  @media screen and (max-width: 768px) {
    .ai-sticky-nav-mobile-toggle-{{ ai_gen_id }} {
      display: block;
    }

    .ai-sticky-nav-menu-{{ ai_gen_id }} {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background-color: {{ block.settings.background_color }};
      flex-direction: column;
      gap: 0;
      padding: 20px;
      border-top: 1px solid {{ block.settings.border_color }};
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px);
      transition: all 0.3s ease;
    }

    .ai-sticky-nav-menu-{{ ai_gen_id }}.open {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }

    .ai-sticky-nav-link-{{ ai_gen_id }} {
      padding: 12px 0;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .ai-sticky-nav-link-{{ ai_gen_id }}:last-child {
      border-bottom: none;
    }
  }

  html {
    scroll-behavior: smooth;
  }

  .ai-sticky-nav-spacer-{{ ai_gen_id }} {
    height: calc({{ block.settings.padding_vertical | times: 2 }}px + {{ block.settings.font_size }}px + {{ block.settings.link_padding_vertical | times: 2 }}px + {{ block.settings.border_width }}px);
  }
{% endstyle %}

<sticky-navigation-{{ ai_gen_id }}
  class="ai-sticky-nav-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-sticky-nav-container-{{ ai_gen_id }}">
    <nav role="navigation" aria-label="Sticky navigation">
      <button
        class="ai-sticky-nav-mobile-toggle-{{ ai_gen_id }}"
        aria-label="Toggle navigation menu"
        aria-expanded="false"
      >
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="3" y1="6" x2="21" y2="6"></line>
          <line x1="3" y1="12" x2="21" y2="12"></line>
          <line x1="3" y1="18" x2="21" y2="18"></line>
        </svg>
      </button>

      <ul class="ai-sticky-nav-menu-{{ ai_gen_id }}">
        {% for i in (1..6) %}
          {% assign menu_text_key = 'menu_item_' | append: i | append: '_text' %}
          {% assign menu_anchor_key = 'menu_item_' | append: i | append: '_anchor' %}
          {% assign menu_text = block.settings[menu_text_key] %}
          {% assign menu_anchor = block.settings[menu_anchor_key] %}
          
          {% if menu_text != blank and menu_anchor != blank %}
            <li class="ai-sticky-nav-item-{{ ai_gen_id }}">
              <a
                href="#{{ menu_anchor }}"
                class="ai-sticky-nav-link-{{ ai_gen_id }}"
                data-anchor="{{ menu_anchor }}"
              >
                {{ menu_text }}
              </a>
            </li>
          {% endif %}
        {% endfor %}
      </ul>
    </nav>
  </div>
</sticky-navigation-{{ ai_gen_id }}>

<div class="ai-sticky-nav-spacer-{{ ai_gen_id }}"></div>

<script>
  (function() {
    class StickyNavigation{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.mobileToggle = this.querySelector('.ai-sticky-nav-mobile-toggle-{{ ai_gen_id }}');
        this.menu = this.querySelector('.ai-sticky-nav-menu-{{ ai_gen_id }}');
        this.links = this.querySelectorAll('.ai-sticky-nav-link-{{ ai_gen_id }}');
        this.sections = [];
        this.currentActiveLink = null;
      }

      connectedCallback() {
        this.setupMobileMenu();
        this.setupSmoothScroll();
        this.setupScrollSpy();
        this.findSections();
        this.handleScroll();
        
        window.addEventListener('scroll', this.handleScroll.bind(this));
        window.addEventListener('resize', this.findSections.bind(this));
      }

      disconnectedCallback() {
        window.removeEventListener('scroll', this.handleScroll.bind(this));
        window.removeEventListener('resize', this.findSections.bind(this));
      }

      setupMobileMenu() {
        if (this.mobileToggle) {
          this.mobileToggle.addEventListener('click', () => {
            const isOpen = this.menu.classList.contains('open');
            this.menu.classList.toggle('open');
            this.mobileToggle.setAttribute('aria-expanded', !isOpen);
          });
        }

        this.links.forEach(link => {
          link.addEventListener('click', () => {
            this.menu.classList.remove('open');
            if (this.mobileToggle) {
              this.mobileToggle.setAttribute('aria-expanded', 'false');
            }
          });
        });
      }

      setupSmoothScroll() {
        this.links.forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const anchor = link.getAttribute('data-anchor');
            const targetElement = document.getElementById(anchor);
            
            if (targetElement) {
              const navHeight = this.offsetHeight;
              const targetPosition = targetElement.offsetTop - navHeight - 20;
              
              window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
              });
            }
          });
        });
      }

      setupScrollSpy() {
        this.findSections();
      }

      findSections() {
        this.sections = [];
        this.links.forEach(link => {
          const anchor = link.getAttribute('data-anchor');
          const element = document.getElementById(anchor);
          if (element) {
            this.sections.push({
              element: element,
              link: link,
              anchor: anchor
            });
          }
        });
      }

      handleScroll() {
        const scrollPosition = window.scrollY + this.offsetHeight + 50;
        let activeSection = null;

        this.sections.forEach(section => {
          const sectionTop = section.element.offsetTop;
          const sectionBottom = sectionTop + section.element.offsetHeight;
          
          if (scrollPosition >= sectionTop && scrollPosition <= sectionBottom) {
            activeSection = section;
          }
        });

        if (activeSection && activeSection.link !== this.currentActiveLink) {
          this.links.forEach(link => link.classList.remove('active'));
          activeSection.link.classList.add('active');
          this.currentActiveLink = activeSection.link;
        }
      }
    }

    customElements.define('sticky-navigation-{{ ai_gen_id }}', StickyNavigation{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Sticky Navigation",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Menu Items"
    },
    {
      "type": "text",
      "id": "menu_item_1_text",
      "label": "Menu item 1 text",
      "default": "Home"
    },
    {
      "type": "text",
      "id": "menu_item_1_anchor",
      "label": "Menu item 1 anchor ID",
      "default": "home"
    },
    {
      "type": "text",
      "id": "menu_item_2_text",
      "label": "Menu item 2 text",
      "default": "About"
    },
    {
      "type": "text",
      "id": "menu_item_2_anchor",
      "label": "Menu item 2 anchor ID",
      "default": "about"
    },
    {
      "type": "text",
      "id": "menu_item_3_text",
      "label": "Menu item 3 text",
      "default": "Services"
    },
    {
      "type": "text",
      "id": "menu_item_3_anchor",
      "label": "Menu item 3 anchor ID",
      "default": "services"
    },
    {
      "type": "text",
      "id": "menu_item_4_text",
      "label": "Menu item 4 text",
      "default": "Products"
    },
    {
      "type": "text",
      "id": "menu_item_4_anchor",
      "label": "Menu item 4 anchor ID",
      "default": "products"
    },
    {
      "type": "text",
      "id": "menu_item_5_text",
      "label": "Menu item 5 text",
      "default": "Contact"
    },
    {
      "type": "text",
      "id": "menu_item_5_anchor",
      "label": "Menu item 5 anchor ID",
      "default": "contact"
    },
    {
      "type": "text",
      "id": "menu_item_6_text",
      "label": "Menu item 6 text"
    },
    {
      "type": "text",
      "id": "menu_item_6_anchor",
      "label": "Menu item 6 anchor ID"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "alignment",
      "label": "Menu alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "flex-end",
          "label": "Right"
        }
      ],
      "default": "center"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 800,
      "max": 1400,
      "step": 50,
      "unit": "px",
      "label": "Maximum width",
      "default": 1200
    },
    {
      "type": "range",
      "id": "padding_vertical",
      "min": 5,
      "max": 30,
      "step": 1,
      "unit": "px",
      "label": "Vertical padding",
      "default": 15
    },
    {
      "type": "range",
      "id": "item_spacing",
      "min": 10,
      "max": 50,
      "step": 2,
      "unit": "px",
      "label": "Item spacing",
      "default": 20
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "rgba(255, 255, 255, 0.95)"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "text_hover_color",
      "label": "Text hover color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "active_text_color",
      "label": "Active text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "link_hover_background",
      "label": "Link hover background",
      "default": "rgba(0, 0, 0, 0.05)"
    },
    {
      "type": "color",
      "id": "active_background_color",
      "label": "Active background color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "border_color",
      "label": "Border color",
      "default": "rgba(0, 0, 0, 0.1)"
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "font_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Font size",
      "default": 16
    },
    {
      "type": "select",
      "id": "font_weight",
      "label": "Font weight",
      "options": [
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi Bold"
        },
        {
          "value": "700",
          "label": "Bold"
        }
      ],
      "default": "500"
    },
    {
      "type": "select",
      "id": "text_transform",
      "label": "Text transform",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "uppercase",
          "label": "Uppercase"
        },
        {
          "value": "lowercase",
          "label": "Lowercase"
        },
        {
          "value": "capitalize",
          "label": "Capitalize"
        }
      ],
      "default": "none"
    },
    {
      "type": "header",
      "content": "Link Style"
    },
    {
      "type": "range",
      "id": "link_padding_vertical",
      "min": 5,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Link vertical padding",
      "default": 8
    },
    {
      "type": "range",
      "id": "link_padding_horizontal",
      "min": 10,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Link horizontal padding",
      "default": 16
    },
    {
      "type": "range",
      "id": "link_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Link border radius",
      "default": 6
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 0,
      "max": 5,
      "step": 1,
      "unit": "px",
      "label": "Border width",
      "default": 1
    }
  ],
  "presets": [
    {
      "name": "Sticky Navigation"
    }
  ]
}
{% endschema %}